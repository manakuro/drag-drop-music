{
  "name": "typedarray-to-buffer",
  "description": "Convert a typed array to a Buffer without a copy",
  "version": "1.0.4",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "bugs": {
    "url": "https://github.com/feross/typedarray-to-buffer/issues"
  },
  "dependencies": {},
  "devDependencies": {
    "tape": "2.x"
  },
  "homepage": "http://feross.org",
  "keywords": [
    "buffer",
    "typed array",
    "convert",
    "no copy",
    "uint8array",
    "uint16array",
    "uint32array",
    "int16array",
    "int32array",
    "float32array",
    "float64array",
    "browser",
    "arraybuffer",
    "dataview"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/typedarray-to-buffer.git"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/6..latest",
      "chrome/4..latest",
      "firefox/3..latest",
      "safari/5.1..latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6"
    ]
  },
  "readme": "# typedarray-to-buffer [![travis](https://img.shields.io/travis/feross/typedarray-to-buffer.svg)](https://travis-ci.org/feross/typedarray-to-buffer) [![npm](https://img.shields.io/npm/v/typedarray-to-buffer.svg)](https://npmjs.org/package/typedarray-to-buffer) [![gittip](https://img.shields.io/gittip/feross.svg)](https://www.gittip.com/feross/)\n\n#### Convert a typed array to a [Buffer](https://github.com/feross/buffer) without a copy.\n\n[![testling badge](https://ci.testling.com/feross/typedarray-to-buffer.png)](https://ci.testling.com/feross/typedarray-to-buffer)\n\nSay you're using the ['buffer'](https://github.com/feross/buffer) module on npm, or\n[browserify](http://browserify.org/) and you're working with lots of binary data.\n\nUnfortunately, sometimes the browser or someone else's API gives you an `ArrayBuffer`\nor a typed array like `Uint8Array` to work with and you need to convert it to a\n`Buffer`. What do you do?\n\nOf course: `new Buffer(uint8array)`\n\nBut, alas, every time you do `new Buffer(uint8array)` **the entire array gets copied**.\nThe `Buffer` constructor does a copy; this is\ndefined by the [node docs](http://nodejs.org/api/buffer.html) and the 'buffer' module\nmatches the node API exactly.\n\nSo, how can we avoid this expensive copy in\n[performance critical applications](https://github.com/feross/buffer/issues/22)?\n\n***Simply use this module, of course!***\n\n## install\n\n```bash\nnpm install typedarray-to-buffer\n```\n\n## usage\n\nTo convert a typed array to a `Buffer` **without a copy**, do this:\n\n```js\nvar toBuffer = require('typedarray-to-buffer')\n\nvar arr = new Uint8Array([1, 2, 3])\narr = toBuffer(arr)\n\n// arr is a buffer now!\n\narr.toString()  // '\\u0001\\u0002\\u0003'\narr.readUInt16BE(0)  // 258\n```\n\n## how it works\n\nIf the browser supports typed arrays, then `toBuffer` will **augment the Uint8Array** you\npass in with the `Buffer` methods and return it. See\n[how does Buffer work?](https://github.com/feross/buffer#how-does-it-work) for more about\nhow augmentation works.\n\nIf the browser doesn't support typed arrays, then `toBuffer` will create a new `Buffer`\nobject, copy the data into it, and return it. There's no simple performance optimization\nwe can do for old browsers. Oh well.\n\nIf this module is used in node, then it will just call `new Buffer`. This is just for\nthe convenience of modules that work in both node and the browser.\n\n## license\n\nMIT. Copyright (C) [Feross Aboukhadijeh](http://feross.org).\n",
  "readmeFilename": "README.md",
  "_id": "typedarray-to-buffer@1.0.4",
  "dist": {
    "shasum": "9bb8ba0e841fb3f4cf1fe7c245e9f3fa8a5fe99c"
  },
  "_from": "typedarray-to-buffer@~1.0.0",
  "_resolved": "https://registry.npmjs.org/typedarray-to-buffer/-/typedarray-to-buffer-1.0.4.tgz"
}
